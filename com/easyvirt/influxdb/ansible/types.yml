tosca_definitions_version: alien_dsl_2_0_0

metadata:
  template_name: com.easyvirt.influxdb.ansible
  template_version: 0.0.11-SNAPSHOT
  template_author: easyvirt

description: InfluxDB installation with Ansible

imports:
  - tosca-normative-types:1.0.0-ALIEN20
  - alien-base-types:2.0.0
  - com.easyvirt.influxdb.pub:0.0.11-SNAPSHOT

node_types:
  com.easyvirt.influxdb.ansible.nodes.InfluxDbEndpoint:
    derived_from: org.ystia.nodes.Database
    description: A node that provides an InfluxDB endpoint.
    metadata:
      icon: /images/influxdb.png
    capabilities:
      influxdb_endpoint:
        type: com.easyvirt.influxdb.pub.capabilities.Endpoint.InfluxDbEndpoint
        occurrences: [0, unbounded]
    requirements:
      - host:
          capability: com.easyvirt.influxdb.pub.capabilities.Container.InfluxDbServer
          relationship: com.easyvirt.influxdb.ansible.relationships.HostedOn.InfluxDbServer
          occurrences: [1,1]
      - blockstorage:
          capability: tosca.capabilities.Node
          relationship: com.easyvirt.influxdb.ansible.relationships.DependsOn.InfluxDbVolume
          occurrences: [0,1]
    properties:
      user:
        type: string
        default: "hydda"
        description: The special user account used for database administration.
      password:
        type: string
        default: "pass"
        description: The password associated with the user account provided in the ‘user’ property.</p>
    interfaces:
      Standard:
        create:
          inputs:
            DB_NAME: { get_property: [SELF, name] }
          implementation: scripts/influxdb_create_db.yaml
        configure:
          inputs:
            DB_NAME: { get_property: [SELF, name] }
            DB_USER: { get_property: [SELF, user] }
            DB_PASS: { get_property: [SELF, password] }
          implementation: scripts/influxdb_configure_db.yaml
    artifacts:
      - scripts:
          type: tosca.artifacts.File
          file: scripts


  com.easyvirt.influxdb.ansible.nodes.InfluxDbServer:
    derived_from: org.ystia.nodes.DBMS
    description: InfluxDB Server component for linux
    tags:
      icon: /images/influxdb.png
    properties:
      component_version:
        type: version
        default: 1.7
        constraints:
          - equal: 1.7
      api_port:
        type: integer
        default: 8086
        description: The port on which the underlying database service will listen to data. </p>
      rpc_port:
        type: integer
        default: 8088
        description: The RPC port to perform back up and restore operations. </p>
      influxdb_data_path:
        type: string
        default: "/mountedStorageNb/influxdb/"
        description: The path where influxdb data is stored. </p>
    requirements:
      - host: 
          capability: tosca.capabilities.Container
          node: tosca.nodes.Compute
          relationship: tosca.relationships.HostedOn
          occurrences: [1, 1]
          node_filter:
            capabilities:
              - tosca.capabilities.OperatingSystem:
                  properties:
                    - type: { equal: linux }
                    - architecture: { equal: x86_64 }
                    - distribution: { valid_values: [ "ubuntu", "debian" ] }
      - filesystem_endpoint:
          capability: tosca.capabilities.Node
          relationship: com.easyvirt.influxdb.linux.relationships.DependsOn.InfluxDbVolume
          occurrences: [1, 1]
    capabilities:
      host:
        type: com.easyvirt.influxdb.pub.capabilities.Container.InfluxDbServer
    interfaces:
      Standard:
        create:
          inputs:
            DB_VERSION: { get_property: [SELF, component_version] }
          implementation: scripts/influxdb_install.yaml
        configure:
          inputs:
            API_PORT: { get_property: [SELF, api_port] }
            RPC_PORT: { get_property: [SELF, rpc_port] }
            INFLUXDB_DATA_PATH: { get_property: [SELF, influxdb_data_path] }  
          implementation: scripts/influxdb_configure.yaml
        start:
          implementation: scripts/influxdb_start.yaml
        stop:
          implementation: scripts/influxdb_stop.yaml
    artifacts:
      - scripts:
          type: tosca.artifacts.File
          file: scripts

relationship_types:
  com.easyvirt.influxdb.linux.relationships.HostedOn.InfluxDbServer:
    derived_from: org.ystia.relationships.HostedOn
    description: >
      This type represents a hosting relationship between InfluxDbServer and InfluxDbEndpoint nodes components
    valid_target_types: [ com.easyvirt.influxdb.pub.capabilities.Container.InfluxDbServer ]

  com.easyvirt.influxdb.linux.relationships.DependsOn.InfluxDbVolume:
    derived_from: org.ystia.relationships.DependsOn
    valid_target_types: [ tosca.capabilities.Node ]
    interfaces:
      Configure:
        pre_configure_source:
          inputs:
            TARGET_BLOCKSTORAGE_LOCATION: { get_attribute: [TARGET, location] }
          implementation: scripts/influxdb_pre_configure_volume.yaml
    artifacts:
      - scripts:
          type: tosca.artifacts.File
          file: scripts
